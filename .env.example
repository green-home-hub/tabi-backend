# ============================================================================
# Tabi Backend - Environment Variables Template
# Sistema de Control de Persianas IoT
#
# Instructions:
# 1. Copy this file to .env
# 2. Update the values according to your environment
# 3. Never commit .env to version control
# ============================================================================

# =============================================================================
# Application Configuration
# =============================================================================

# Application environment (development, staging, production)
ENVIRONMENT=development

# Application version (used for Docker builds)
VERSION=1.0.0

# Timezone configuration
TZ=America/New_York

# Data and log directories (for production deployment)
DATA_DIR=./data
LOG_DIR=./logs

# =============================================================================
# MQTT Broker Configuration
# =============================================================================

# MQTT broker connection
MQTT_BROKER_HOST=localhost
MQTT_BROKER_PORT=1883
MQTT_CLIENT_ID=tabi-backend

# MQTT authentication (optional)
MQTT_USERNAME=
MQTT_PASSWORD=

# MQTT keep alive interval (seconds)
MQTT_KEEP_ALIVE=5

# =============================================================================
# HTTP Server Configuration
# =============================================================================

# Server binding configuration
SERVER_HOST=0.0.0.0
SERVER_PORT=8080

# API configuration
API_VERSION=v1
API_PREFIX=/api

# =============================================================================
# Database Configuration - PostgreSQL
# =============================================================================

# PostgreSQL connection
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=tabi_backend
POSTGRES_USER=tabi_user
POSTGRES_PASSWORD=tabi_secure_password_2024

# Connection pool settings
POSTGRES_MAX_CONNECTIONS=10
POSTGRES_MIN_CONNECTIONS=1

# Database URL (alternative to individual settings)
# DATABASE_URL=postgresql://tabi_user:password@localhost/tabi_backend

# =============================================================================
# Redis Configuration (Optional - for caching/sessions)
# =============================================================================

# Redis connection
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# Redis URL (alternative to individual settings)
# REDIS_URL=redis://localhost:6379/0

# =============================================================================
# InfluxDB Configuration (Optional - for time series data)
# =============================================================================

# InfluxDB connection
INFLUXDB_HOST=localhost
INFLUXDB_PORT=8086
INFLUXDB_ORG=tabi-home
INFLUXDB_BUCKET=iot-metrics
INFLUXDB_TOKEN=tabi-super-secret-token-2024
INFLUXDB_PASSWORD=tabi_influx_2024

# =============================================================================
# Monitoring and Observability
# =============================================================================

# Grafana configuration
GRAFANA_PASSWORD=tabi_grafana_2024
GRAFANA_PORT=3000

# Prometheus configuration
PROMETHEUS_PORT=9090

# Log level (error, warn, info, debug, trace)
RUST_LOG=info
RUST_BACKTRACE=0

# =============================================================================
# Security Configuration
# =============================================================================

# JWT secret for authentication (generate a secure random string)
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# API rate limiting (requests per minute)
RATE_LIMIT_RPM=60

# CORS configuration
CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080

# =============================================================================
# SSL/TLS Configuration (Production)
# =============================================================================

# SSL certificate paths (for HTTPS)
SSL_CERT_PATH=/etc/ssl/certs/tabi.crt
SSL_KEY_PATH=/etc/ssl/private/tabi.key

# Enable HTTPS
ENABLE_HTTPS=false

# =============================================================================
# Docker Build Configuration
# =============================================================================

# Docker build arguments
BUILD_DATE=2024-01-15T10:30:00Z
VCS_REF=main
DOCKER_REGISTRY=ghcr.io/your-username

# Docker Compose profiles
COMPOSE_PROFILES=

# =============================================================================
# Raspberry Pi Specific Configuration
# =============================================================================

# GPIO pins for direct hardware control (if applicable)
GPIO_ENABLED=false
GPIO_PINS=18,19,20,21

# Hardware monitoring
ENABLE_HARDWARE_MONITORING=true
CPU_TEMP_THRESHOLD=80.0

# =============================================================================
# Notification Configuration (Optional)
# =============================================================================

# Email notifications
SMTP_HOST=
SMTP_PORT=587
SMTP_USERNAME=
SMTP_PASSWORD=
SMTP_FROM_EMAIL=tabi@yourdomain.com

# Push notifications
PUSH_SERVICE_KEY=
FCM_SERVER_KEY=

# Telegram bot (for alerts)
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=

# =============================================================================
# External Integrations (Optional)
# =============================================================================

# Weather API for automation
WEATHER_API_KEY=
WEATHER_LOCATION=

# Home Assistant integration
HOME_ASSISTANT_URL=
HOME_ASSISTANT_TOKEN=

# =============================================================================
# Development Configuration
# =============================================================================

# Development mode settings
DEBUG_MODE=false
ENABLE_HOT_RELOAD=false

# Test database (for development)
TEST_DB_URL=postgresql://test_user:test_pass@localhost/tabi_test

# Mock devices for testing
ENABLE_MOCK_DEVICES=false
MOCK_DEVICE_COUNT=3

# =============================================================================
# Backup Configuration (Production)
# =============================================================================

# Backup settings
BACKUP_ENABLED=true
BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
BACKUP_RETENTION_DAYS=7

# Backup destinations
BACKUP_LOCAL_PATH=./backups
BACKUP_S3_BUCKET=
BACKUP_S3_ACCESS_KEY=
BACKUP_S3_SECRET_KEY=

# =============================================================================
# Performance Configuration
# =============================================================================

# Application workers/threads
WORKER_THREADS=4

# Request timeout (seconds)
REQUEST_TIMEOUT=30

# Connection timeouts
DB_CONNECTION_TIMEOUT=10
MQTT_CONNECTION_TIMEOUT=10

# Cache settings
CACHE_TTL=300
CACHE_MAX_SIZE=1000

# =============================================================================
# Feature Flags
# =============================================================================

# Enable/disable features
ENABLE_METRICS=true
ENABLE_ANALYTICS=false
ENABLE_WEBHOOKS=false
ENABLE_SCHEDULED_TASKS=true

# Beta features
ENABLE_VOICE_CONTROL=false
ENABLE_AI_AUTOMATION=false

# =============================================================================
# Deployment Configuration
# =============================================================================

# Container resource limits
CONTAINER_MEMORY_LIMIT=256m
CONTAINER_CPU_LIMIT=0.5

# Health check configuration
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3

# =============================================================================
# Example Values for Quick Start
# =============================================================================

# Uncomment and modify these for a quick development setup:

# MQTT_BROKER_HOST=test.mosquitto.org  # Use public broker for testing
# POSTGRES_PASSWORD=dev_password_123
# REDIS_PASSWORD=dev_redis_123
# JWT_SECRET=dev-jwt-secret-not-for-production
# ENVIRONMENT=development
# RUST_LOG=debug
# RUST_BACKTRACE=1
